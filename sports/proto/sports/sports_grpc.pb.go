// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: sports/sports.proto

package sports

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SportingClient is the client API for Sporting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SportingClient interface {
	// ListSports will return a collection of all sports.
	ListSports(ctx context.Context, in *ListSportsRequest, opts ...grpc.CallOption) (*ListSportsResponse, error)
	FetchSport(ctx context.Context, in *FetchSportRequest, opts ...grpc.CallOption) (*FetchSportResponse, error)
}

type sportingClient struct {
	cc grpc.ClientConnInterface
}

func NewSportingClient(cc grpc.ClientConnInterface) SportingClient {
	return &sportingClient{cc}
}

func (c *sportingClient) ListSports(ctx context.Context, in *ListSportsRequest, opts ...grpc.CallOption) (*ListSportsResponse, error) {
	out := new(ListSportsResponse)
	err := c.cc.Invoke(ctx, "/sports.Sporting/ListSports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportingClient) FetchSport(ctx context.Context, in *FetchSportRequest, opts ...grpc.CallOption) (*FetchSportResponse, error) {
	out := new(FetchSportResponse)
	err := c.cc.Invoke(ctx, "/sports.Sporting/FetchSport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SportingServer is the server API for Sporting service.
// All implementations should embed UnimplementedSportingServer
// for forward compatibility
type SportingServer interface {
	// ListSports will return a collection of all sports.
	ListSports(context.Context, *ListSportsRequest) (*ListSportsResponse, error)
	FetchSport(context.Context, *FetchSportRequest) (*FetchSportResponse, error)
}

// UnimplementedSportingServer should be embedded to have forward compatible implementations.
type UnimplementedSportingServer struct {
}

func (UnimplementedSportingServer) ListSports(context.Context, *ListSportsRequest) (*ListSportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSports not implemented")
}
func (UnimplementedSportingServer) FetchSport(context.Context, *FetchSportRequest) (*FetchSportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSport not implemented")
}

// UnsafeSportingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SportingServer will
// result in compilation errors.
type UnsafeSportingServer interface {
	mustEmbedUnimplementedSportingServer()
}

func RegisterSportingServer(s grpc.ServiceRegistrar, srv SportingServer) {
	s.RegisterService(&Sporting_ServiceDesc, srv)
}

func _Sporting_ListSports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportingServer).ListSports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sports.Sporting/ListSports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportingServer).ListSports(ctx, req.(*ListSportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sporting_FetchSport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportingServer).FetchSport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sports.Sporting/FetchSport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportingServer).FetchSport(ctx, req.(*FetchSportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sporting_ServiceDesc is the grpc.ServiceDesc for Sporting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sporting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sports.Sporting",
	HandlerType: (*SportingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSports",
			Handler:    _Sporting_ListSports_Handler,
		},
		{
			MethodName: "FetchSport",
			Handler:    _Sporting_FetchSport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sports/sports.proto",
}
